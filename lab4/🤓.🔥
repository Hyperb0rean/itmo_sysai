from python import Python
from random import *
from math import * 
from memory import memset_zero, stack_allocation
from random import rand
from algorithm import vectorize, parallelize, vectorize_unroll
from algorithm import Static2DTileUnitFunc as Tile2DFunc
from python import Python
from tensor import Tensor
from utils.index import Index
from memory.buffer import NDBuffer

alias type = DType.float32


struct Matrix:
    var data: DTypePointer[type]
    var rows: Int
    var cols: Int

    # Initialize zeroeing all values
    fn __init__(inout self, rows: Int, cols: Int):
        self.data = DTypePointer[type].alloc(rows * cols)
        memset_zero(self.data, rows * cols)
        self.rows = rows
        self.cols = cols

    # Initialize taking a pointer, don't set any elements
    fn __init__(inout self, rows: Int, cols: Int, data: DTypePointer[DType.float32]):
        self.data = data
        self.rows = rows
        self.cols = cols

    ## Initialize with random values
    @staticmethod
    fn rand(rows: Int, cols: Int) -> Self:
        let data = DTypePointer[type].alloc(rows * cols)
        rand(data, rows * cols)
        return Self(rows, cols, data)

    fn __getitem__(self, y: Int, x: Int) -> Float32:
        return self.load[1](y, x)

    fn __setitem__(self, y: Int, x: Int, val: Float32):
        return self.store[1](y, x, val)

    fn load[nelts: Int](self, y: Int, x: Int) -> SIMD[DType.float32, nelts]:
        return self.data.simd_load[nelts](y * self.cols + x)

    fn store[nelts: Int](self, y: Int, x: Int, val: SIMD[DType.float32, nelts]):
        return self.data.simd_store[nelts](y * self.cols + x, val)


fn matmul(inout C: Matrix, A: Matrix, B: Matrix):
    for m in range(C.rows):
        for k in range(A.cols):
            for n in range(C.cols):
                C[m, n] += A[m, k] * B[k, n]

fn gauss(inout all_x: Matrix, matrix: Matrix):
    for i in range(matrix.cols):
        if matrix[i,i] == 0:
            for j in range(matrix.rows):
                if matrix[j, i] != 0:
                    for k in range(matrix.cols + 1):
                        matrix[i, k] += matrix[j, k]
                    break

    if matrix[matrix.rows - 1, matrix.cols - 1] == 0:
        for i in range(matrix.rows):
            if matrix[i, matrix.cols - 1] != 0:
                for j in range(matrix.cols + 1):
                    matrix[matrix.rows, j] += matrix[i,j]
                break

    # forward stroke

    for i in range(matrix.rows):
        for j in range(i + 1, matrix.cols):
            let c = matrix[j, i] / matrix[i, i]
            for k in range(matrix.rows, i - 1, -1):
                matrix[j, k] -= c * matrix[i, k]

    # creating diagonals of ones

    for i in range(matrix.rows):
        let tmp = matrix[i, i]
        for j in range(matrix.cols + 1):
            matrix[i, j] /= tmp

    # reverse stroke

    all_x.__init__(matrix.rows, 1)
    all_x[matrix.rows - 1,0] = matrix[matrix.rows - 1, matrix.cols]

    for i in range(matrix.rows - 2, -1, -1):
        all_x[i,0] = matrix[i, matrix.cols]
        for j in range(i + 1, matrix.cols):
            all_x[i,0] -= matrix[i, j] * all_x[j,0]


fn main():
   print("Hello, world!")